import csv
import os
import re
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from dotenv import load_dotenv

# –ó–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –æ—Ç .env —Ñ–∞–π–ª
load_dotenv()

# –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ base_path —Å–ø—Ä—è–º–æ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è —Ñ–∞–π–ª
base_path = os.path.dirname(os.path.abspath(__file__))


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –¥—Ä–∞–π–≤—ä—Ä–∞
def create_driver():
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    return webdriver.Chrome(options=options)

# –ù–∞–º–∏—Ä–∞–º–µ URL –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ SKU
def find_product_url(driver, sku):
    search_url = f"https://filstar.com/bg/products/search/?q={sku}"
    driver.get(search_url)
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "a[href*='?sku=']"))
        )
        link_el = driver.find_element(By.CSS_SELECTOR, "a[href*='?sku=']")
        product_url = link_el.get_attribute("href")
        
        if sku in product_url:
            return product_url
        else:
            print(f"‚ùå SKU {sku} –Ω–∞–º–µ—Ä–∏ –≥—Ä–µ—à–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_url}")
            return None
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å SKU {sku} –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω: {e}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞, –±—Ä–æ–π–∫–∞—Ç–∞ –∏ —Ü–µ–Ω–∞—Ç–∞ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
def check_availability_and_price(driver, sku):
    try:
        try:
            row = driver.find_element(By.CSS_SELECTOR, f"tr[class*='table-row-{sku}']")
        except Exception as e:
            print(f"‚ùå –ù–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω —Ä–µ–¥ —Å SKU {sku}: {e}")
            return None, 0, None
        
        qty_input = row.find_element(By.CSS_SELECTOR, "td.quantity-plus-minus input")
        max_qty_attr = qty_input.get_attribute("data-max-qty-1")
        max_qty = int(max_qty_attr) if max_qty_attr and max_qty_attr.isdigit() else 0
        status = "–ù–∞–ª–∏—á–µ–Ω" if max_qty > 0 else "–ò–∑—á–µ—Ä–ø–∞–Ω"

        price_element = row.find_element(By.CSS_SELECTOR, "div.custom-tooltip-holder")

        try:
            # –í–∑–µ–º–∞–º–µ –Ω–æ—Ä–º–∞–ª–Ω–∞—Ç–∞ —Ü–µ–Ω–∞ –æ—Ç <strike>
            normal_price_el = price_element.find_element(By.TAG_NAME, "strike")
            raw_price = normal_price_el.text.strip()
            price = re.findall(r'\d+\.\d+', raw_price)[0]
        except:
            # –ê–∫–æ –Ω—è–º–∞ <strike>, –≤–∑–∏–º–∞–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—Ç–∞ —Ü–µ–Ω–∞
            price_text = price_element.text.strip()
            price_parts = price_text.split()
            price = re.findall(r'\d+\.\d+', price_parts[-2])[0]

        return status, max_qty, price

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –∏ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ SKU {sku}: {e}")
        return None, 0, None

# –ß–µ—Ç–µ–Ω–µ –Ω–∞ SKU –∫–æ–¥–æ–≤–µ –æ—Ç CSV
def read_sku_codes(path):
    with open(path, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)
        return [row[0].strip() for row in reader if row]

# –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ CSV
def save_results(results, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['SKU', '–ù–∞–ª–∏—á–Ω–æ—Å—Ç', '–ë—Ä–æ–π–∫–∏', '–¶–µ–Ω–∞'])
        writer.writerows(results)

# –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ –Ω–µ–Ω–∞–º–µ—Ä–µ–Ω–∏ SKU –∫–æ–¥–æ–≤–µ
def save_not_found(skus_not_found, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['SKU'])
        for sku in skus_not_found:
            writer.writerow([sku])

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
def main():
    sku_file = os.path.join(base_path, 'sku_list_filstar.csv')
    result_file = os.path.join(base_path, 'results_filstar.csv')
    not_found_file = os.path.join(base_path, 'not_found_filstar.csv')

    skus = read_sku_codes(sku_file)
    driver = create_driver()
    results = []
    not_found = []

    for sku in skus:
        print(f"‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–≤–∞–º SKU: {sku}")
        product_url = find_product_url(driver, sku)
        if product_url:
            print(f"  ‚úÖ –ù–∞–º–µ—Ä–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_url}")
            driver.get(product_url)
            status, qty, price = check_availability_and_price(driver, sku)
            
            if status is None or price is None:
                print(f"‚ùå SKU {sku} –Ω–µ —Å—ä–¥—ä—Ä–∂–∞ –≤–∞–ª–∏–¥–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")
                not_found.append(sku)
            else:
                print(f"  üì¶ –°—Ç–∞—Ç—É—Å: {status} | –ë—Ä–æ–π–∫–∏: {qty} | –¶–µ–Ω–∞: {price} –ª–≤.")
                results.append([sku, status, qty, price])
        else:
            not_found.append(sku)

    driver.quit()
    
    save_results(results, result_file)
    save_not_found(not_found, not_found_file)

    print(f"‚úÖ –ó–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: {result_file}")
    print(f"‚ùå –ù–µ–Ω–∞–º–µ—Ä–µ–Ω–∏ SKU –∫–æ–¥–æ–≤–µ: {not_found_file}")

if __name__ == '__main__':
    main()
