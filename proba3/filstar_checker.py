import csv
import os
import re
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from dotenv import load_dotenv

# –ó–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –æ—Ç .env —Ñ–∞–π–ª (–∞–∫–æ –∏–º–∞)
load_dotenv()

# –ü—ä—Ç —Å–ø—Ä—è–º–æ —Ç–µ–∫—É—â–∏—è —Ñ–∞–π–ª
base_path = os.path.dirname(os.path.abspath(__file__))

# --------- WebDriver ---------
def create_driver():
    options = Options()
    # –ü–æ-—Å—Ç–∞–±–∏–ª–µ–Ω headless —Ä–µ–∂–∏–º –≤ GitHub Actions
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1365,1000")
    return webdriver.Chrome(options=options)

def _wait(driver, sec=10):
    return WebDriverWait(driver, sec)

def _norm(s: str) -> str:
    return (s or "").strip().replace(" ", "").replace("-", "")

def _variants(sku: str):
    a = _norm(sku)
    b = a.lstrip("0") or a
    return [a] if a == b else [a, b]

# --------- –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç ---------
def find_product_url(driver, sku):
    """–í—Ä—ä—â–∞ URL –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ –¥–∞–¥–µ–Ω–æ SKU (–ø–æ–ª–∑–≤–∞ –Ω–æ–≤–∏—è /search?term=...)."""
    for q in _variants(sku):
        search_url = f"https://filstar.com/search?term={q}"
        driver.get(search_url)

        # –ò–∑—á–∞–∫–∞–π –¥–∞ —Å–µ –ø–æ—è–≤—è—Ç —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ (–ø–ª–æ—á–∫–∏) –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞ –ª–∏–ø—Å–∞
        try:
            _wait(driver, 10).until(
                EC.any_of(
                    EC.presence_of_element_located((By.CSS_SELECTOR, ".product-item a[href], a.product-item-link")),
                    EC.presence_of_element_located((By.XPATH, "//*[contains(.,'–Ω—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏') or contains(.,'–ù—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏')]"))
                )
            )
        except TimeoutException:
            continue

        links = driver.find_elements(By.CSS_SELECTOR, ".product-item a[href], a.product-item-link")
        if not links:
            continue

        # –ü—Ä–µ–¥–ø–æ—á–µ—Ç–∏ –ª–∏–Ω–∫, –∫–æ–π—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ SKU –≤—ä–≤ href –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        for el in links:
            href = (el.get_attribute("href") or "")
            txt = (el.text or "").strip()
            if q in href or q in txt:
                return href

        # –ò–Ω–∞—á–µ ‚Äì –ø—ä—Ä–≤–∏—è —Ä–µ–∑—É–ª—Ç–∞—Ç (–ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∏—Ä–∞–º–µ –ø–æ "–ö–û–î" –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞)
        return links[0].get_attribute("href")

    return None

# --------- –ü–∞—Ä—Å–≤–∞–Ω–µ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---------
def _extract_price(text: str):
    if not text:
        return None
    m = re.search(r"(\d+[.,]\d{2})\s*–ª–≤", text.replace("\xa0", " "))
    return m.group(1).replace(",", ".") if m else None

def check_availability_and_price(driver, sku):
    """–ù–∞–º–∏—Ä–∞ —Ä–µ–¥–∞ –ø–æ ‚Äû–ö–û–î‚Äú –∏ –≤—Ä—ä—â–∞ (—Å—Ç–∞—Ç—É—Å, –±—Ä–æ–π–∫–∏, —Ü–µ–Ω–∞)."""
    row = None
    for v in _variants(sku):
        try:
            # –ù–∞–º–∏—Ä–∞–º–µ <tr>, –∫–æ–π—Ç–æ –∏–º–∞ <td> —Å—ä–¥—ä—Ä–∂–∞—â SKU-—Ç–æ
            row = driver.find_element(By.XPATH, f"//tr[.//td[contains(normalize-space(),'{v}')]]")
            break
        except Exception:
            continue

    if not row:
        print(f"‚ùå –ù–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω —Ä–µ–¥ —Å SKU {sku}")
        return None, 0, None

    # –ë—Ä–æ–π–∫–∏ (qty) ‚Äì –ø—ä—Ä–≤–æ –ø—Ä–æ–±–≤–∞–º–µ input –∞—Ç—Ä–∏–±—É—Ç, –∏–Ω–∞—á–µ —á–∏—Å–ª–æ –æ—Ç —Ç–µ–∫—Å—Ç–∞
    qty = 0
    try:
        inp = row.find_element(By.CSS_SELECTOR, "input[name*='quantity'], input[data-max-qty-1]")
        mx = inp.get_attribute("data-max-qty-1") or inp.get_attribute("max")
        if mx and mx.isdigit():
            qty = int(mx)
    except Exception:
        m = re.search(r"\b(\d+)\b", row.text)
        if m:
            qty = int(m.group(1))

    status = "–ù–∞–ª–∏—á–µ–Ω" if qty > 0 else "–ò–∑—á–µ—Ä–ø–∞–Ω"

    # –¶–µ–Ω–∞ ‚Äì –∫–ª–µ—Ç–∫–∞, –∫–æ—è—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ ‚Äû–ª–≤‚Äú, –∏–Ω–∞—á–µ —Ü–µ–ª–∏—è —Ä–µ–¥
    price = None
    try:
        price_cell = row.find_element(By.XPATH, ".//td[contains(.,'–ª–≤')]")
        price = _extract_price(price_cell.text)
    except Exception:
        pass
    if not price:
        price = _extract_price(row.text)

    if not price:
        print(f"‚ùå –ù–µ —É—Å–ø—è—Ö –¥–∞ –∏–∑–≤–∞–¥—è —Ü–µ–Ω–∞ –∑–∞ SKU {sku}")

    return status, qty, price

# --------- CSV I/O ---------
def read_sku_codes(path):
    with open(path, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)  # –ø—Ä–æ–ø—É—Å–Ω–∏ —Ö–µ–¥—ä—Ä–∞
        return [row[0].strip() for row in reader if row and row[0].strip()]

def save_results(results, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        w = csv.writer(f)
        w.writerow(['SKU', '–ù–∞–ª–∏—á–Ω–æ—Å—Ç', '–ë—Ä–æ–π–∫–∏', '–¶–µ–Ω–∞'])
        w.writerows(results)

def save_not_found(skus_not_found, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        w = csv.writer(f)
        w.writerow(['SKU'])
        for sku in skus_not_found:
            w.writerow([sku])

# --------- main ---------
def main():
    sku_file = os.path.join(base_path, 'sku_list_filstar.csv')
    result_file = os.path.join(base_path, 'results_filstar.csv')
    not_found_file = os.path.join(base_path, 'not_found_filstar.csv')

    skus = read_sku_codes(sku_file)
    driver = create_driver()
    results, not_found = [], []

    try:
        for sku in skus:
            print(f"‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–≤–∞–º SKU: {sku}")
            product_url = find_product_url(driver, sku)
            if not product_url:
                print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–º SKU {sku} (–Ω—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –≤ —Ç—ä—Ä—Å–∞—á–∫–∞—Ç–∞)")
                not_found.append(sku)
                continue

            print(f"  ‚úÖ –ù–∞–º–µ—Ä–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_url}")
            driver.get(product_url)
            # –∫—ä—Å–æ –∏–∑—á–∞–∫–≤–∞–Ω–µ JS –¥–∞ –¥–æ—Ä–µ–Ω–¥–µ—Ä–∏—Ä–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            time.sleep(0.6)

            status, qty, price = check_availability_and_price(driver, sku)
            if status is None or price is None:
                print(f"‚ùå SKU {sku} –Ω—è–º–∞ –≤–∞–ª–∏–¥–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å—Ç–∞—Ç—É—Å/—Ü–µ–Ω–∞).")
                not_found.append(sku)
            else:
                print(f"  üì¶ –°—Ç–∞—Ç—É—Å: {status} | –ë—Ä–æ–π–∫–∏: {qty} | –¶–µ–Ω–∞: {price} –ª–≤.")
                results.append([sku, status, qty, price])
    finally:
        driver.quit()

    save_results(results, result_file)
    save_not_found(not_found, not_found_file)
    print(f"‚úÖ –ó–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: {result_file}")
    print(f"‚ùå –ù–µ–Ω–∞–º–µ—Ä–µ–Ω–∏ SKU –∫–æ–¥–æ–≤–µ: {not_found_file}")

if __name__ == '__main__':
    main()
