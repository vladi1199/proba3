import csv
import os
import re
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from dotenv import load_dotenv

# –ó–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –æ—Ç .env —Ñ–∞–π–ª
load_dotenv()

# –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ base_path —Å–ø—Ä—è–º–æ –ª–æ–∫–∞—Ü–∏—è—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏—è —Ñ–∞–π–ª
base_path = os.path.dirname(os.path.abspath(__file__))

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –¥—Ä–∞–π–≤—ä—Ä–∞
# ---------------------------
def create_driver():
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1366,768")
    # –ª–µ–∫ UA (–Ω—è–∫–æ–∏ —Å–∞–π—Ç–æ–≤–µ –æ–≥—Ä–∞–Ω–∏—á–∞–≤–∞—Ç headless)
    options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127 Safari/537.36")
    options.add_argument("--lang=bg-BG,bg")
    return webdriver.Chrome(options=options)

def click_cookies_if_any(driver):
    candidates = [
        (By.CSS_SELECTOR, "#onetrust-accept-btn-handler"),
        (By.XPATH, "//button[contains(., '–ü—Ä–∏–µ–º–∞–º')]"),
        (By.XPATH, "//*[contains(., '–ü—Ä–∏–µ–º–∞–º –±–∏—Å–∫–≤–∏—Ç–∫–∏—Ç–µ')]"),
        (By.XPATH, "//button[contains(., 'Accept')]"),
    ]
    for how, what in candidates:
        try:
            WebDriverWait(driver, 3).until(EC.element_to_be_clickable((how, what))).click()
            break
        except Exception:
            pass

def norm(s):
    return (s or "").strip().replace(" ", "").replace("-", "")

def variants(sku):
    a = norm(sku)
    b = a.lstrip("0") or a
    return [a] if a == b else [a, b]

# -----------------------------------------
# –ù–∞–º–∏—Ä–∞–º–µ URL –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ SKU (–æ–±—Ö–æ–¥)
# -----------------------------------------
def find_product_url(driver, sku):
    """
    –¢—ä—Ä—Å–∏ –≤ /search?term=SKU, –≤–∑–∏–º–∞ –≤—Å–∏—á–∫–∏ –ª–∏–Ω–∫–æ–≤–µ –∫—ä–º –ø—Ä–æ–¥—É–∫—Ç–∏,
    —Ñ–∏–ª—Ç—Ä–∏—Ä–∞ /products/new –∏ –æ—Ç–≤–∞—Ä—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∏—Ç–µ –µ–¥–∏–Ω –ø–æ –µ–¥–∏–Ω,
    –¥–æ–∫–∞—Ç–æ –Ω–∞–º–µ—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –Ω–∞ –∫–æ—è—Ç–æ –ø—Ä–∏—Å—ä—Å—Ç–≤–∞ —Ä–µ–¥—ä—Ç –∑–∞ SKU.
    """
    def gather_links():
        sels = [
            ".search-results .product-item a[href]",
            ".products .product-item a[href]",
            ".product-item a[href]",
            "a.product-item-link",
            "a[href*='/products/']",
        ]
        found = []
        for sel in sels:
            found.extend(driver.find_elements(By.CSS_SELECTOR, sel))
        # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–∞–π
        uniq, seen = [], set()
        for el in found:
            href = el.get_attribute("href") or ""
            if not href:
                continue
            if href in seen:
                continue
            seen.add(href)
            uniq.append(href)
        # –∏–∑–∫–ª—é—á–∏ –æ–±—â–∏/–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏
        uniq = [h for h in uniq if "/products/new" not in h]
        return uniq

    for q in variants(sku):
        search_url = f"https://filstar.com/search?term={q}"
        driver.get(search_url)
        click_cookies_if_any(driver)

        try:
            WebDriverWait(driver, 12).until(
                EC.any_of(
                    EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".product-item, .products, .search-results")),
                    EC.presence_of_element_located((By.XPATH, "//*[contains(.,'–ù—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏') or contains(.,'–Ω—è–º–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏')]"))
                )
            )
        except Exception:
            time.sleep(1.0)

        candidates = gather_links()
        if not candidates:
            continue

        # 1) –û–ø–∏—Ç–∞–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∏, —á–∏–∏—Ç–æ href/—Ç–µ–∫—Å—Ç —Å—ä–¥—ä—Ä–∂–∞—Ç SKU
        prioritized = [h for h in candidates if q in h]
        others = [h for h in candidates if h not in prioritized]
        ordered = prioritized + others

        # 2) –û—Ç–≤–∞—Ä—è–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–Ω–æ –∏ –≤–∞–ª–∏–¥–∏—Ä–∞–π, —á–µ –∏–º–∞ —Ä–µ–¥ –∑–∞ SKU
        for href in ordered[:10]:
            try:
                driver.get(href)
                time.sleep(0.6)
                # –¥–∏—Ä–µ–∫—Ç–Ω–æ –ø–æ —Å—Ç–∞—Ä–∏—è –∫–ª–∞—Å:
                if driver.find_elements(By.CSS_SELECTOR, f"tr[class*='table-row-{q}']"):
                    return href
                # fallback: —Ç—ä—Ä—Å–∏ –∫–ª–µ—Ç–∫–∞ <td> —Å —Ç–µ–∫—Å—Ç–∞ –Ω–∞ SKU (–∫–æ–ª–æ–Ω–∞—Ç–∞ "–ö–û–î")
                if driver.find_elements(By.XPATH, f"//tr[.//td[contains(normalize-space(),'{q}')]]"):
                    return href
            except Exception:
                continue

    return None

# ---------------------------------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞, –±—Ä–æ–π–∫–∞—Ç–∞ –∏ —Ü–µ–Ω–∞—Ç–∞ (–ª–µ–∫–æ)
# ---------------------------------------------------
def check_availability_and_price(driver, sku):
    try:
        # 1) —Ç–≤–æ—è —Å—Ç–∞—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä
        try:
            row = driver.find_element(By.CSS_SELECTOR, f"tr[class*='table-row-{sku}']")
        except Exception:
            # 2) –º–∏–Ω–∏–º–∞–ª–µ–Ω fallback ‚Äì —Ä–µ–¥ —Å –∫–ª–µ—Ç–∫–∞, –∫–æ—è—Ç–æ —Å—ä–¥—ä—Ä–∂–∞ SKU (–∫–æ–ª–æ–Ω–∞ "–ö–û–î")
            try:
                row = driver.find_element(By.XPATH, f"//tr[.//td[contains(normalize-space(),'{sku}')]]")
            except Exception as e2:
                print(f"‚ùå –ù–µ –±–µ—à–µ –Ω–∞–º–µ—Ä–µ–Ω —Ä–µ–¥ —Å SKU {sku}: {e2}")
                return None, 0, None
        
        # qty
        qty = 0
        try:
            qty_input = row.find_element(By.CSS_SELECTOR, "td.quantity-plus-minus input")
            max_qty_attr = qty_input.get_attribute("data-max-qty-1") or qty_input.get_attribute("max")
            if max_qty_attr and max_qty_attr.isdigit():
                qty = int(max_qty_attr)
        except Exception:
            pass
        status = "–ù–∞–ª–∏—á–µ–Ω" if qty > 0 else "–ò–∑—á–µ—Ä–ø–∞–Ω"

        # price (—Ç–≤–æ—è—Ç–∞ –ª–æ–≥–∏–∫–∞)
        price = None
        try:
            price_element = row.find_element(By.CSS_SELECTOR, "div.custom-tooltip-holder")
            try:
                # —Å—Ç–∞—Ä–∞/–Ω–∞–º–∞–ª–µ–Ω–∞ —Ü–µ–Ω–∞
                normal_price_el = price_element.find_element(By.TAG_NAME, "strike")
                raw_price = normal_price_el.text.strip()
                price = re.findall(r"\d+[.,]\d{2}", raw_price)[0].replace(",", ".")
            except Exception:
                price_text = price_element.text.strip()
                m = re.search(r"(\d+[.,]\d{2})", price_text)
                if m:
                    price = m.group(1).replace(",", ".")
        except Exception:
            # –∞–∫–æ –µ–ª–µ–º–µ–Ω—Ç—ä—Ç –≥–æ –Ω—è–º–∞, –æ–ø–∏—Ç–∞–π –¥–∞ –∏–∑–≤–∞–¥–∏—à —Ü–µ–Ω–∞ –æ—Ç —Ü–µ–ª–∏—è —Ä–µ–¥
            m = re.search(r"(\d+[.,]\d{2})\s*–ª–≤", row.text.replace("\xa0", " "))
            if m:
                price = m.group(1).replace(",", ".")

        return status, qty, price

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞ –∏ —Ü–µ–Ω–∞—Ç–∞ –∑–∞ SKU {sku}: {e}")
        return None, 0, None

# -----------------------
# CSV –≤—Ö–æ–¥/–∏–∑—Ö–æ–¥
# -----------------------
def read_sku_codes(path):
    with open(path, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)
        return [row[0].strip() for row in reader if row]

def save_results(results, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['SKU', '–ù–∞–ª–∏—á–Ω–æ—Å—Ç', '–ë—Ä–æ–π–∫–∏', '–¶–µ–Ω–∞'])
        writer.writerows(results)

def save_not_found(skus_not_found, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(output_path, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['SKU'])
        for sku in skus_not_found:
            writer.writerow([sku])

# -----------------------
# main
# -----------------------
def main():
    sku_file = os.path.join(base_path, 'sku_list_filstar.csv')
    result_file = os.path.join(base_path, 'results_filstar.csv')
    not_found_file = os.path.join(base_path, 'not_found_filstar.csv')

    skus = read_sku_codes(sku_file)
    driver = create_driver()
    results = []
    not_found = []

    for sku in skus:
        print(f"‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–≤–∞–º SKU: {sku}")
        product_url = find_product_url(driver, sku)
        if product_url:
            print(f"  ‚úÖ –ù–∞–º–µ—Ä–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_url}")
            driver.get(product_url)
            time.sleep(0.5)  # –∫—Ä–∞—Ç–∫–æ –∏–∑—á–∞–∫–≤–∞–Ω–µ –∑–∞ JS
            status, qty, price = check_availability_and_price(driver, sku)
            
            if status is None or price is None:
                print(f"‚ùå SKU {sku} –Ω–µ —Å—ä–¥—ä—Ä–∂–∞ –≤–∞–ª–∏–¥–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")
                not_found.append(sku)
            else:
                print(f"  üì¶ –°—Ç–∞—Ç—É—Å: {status} | –ë—Ä–æ–π–∫–∏: {qty} | –¶–µ–Ω–∞: {price} –ª–≤.")
                results.append([sku, status, qty, price])
        else:
            print(f"‚ùå –ù—è–º–∞ –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –∑–∞ SKU {sku}")
            not_found.append(sku)

    driver.quit()
    
    save_results(results, result_file)
    save_not_found(not_found, not_found_file)

    print(f"‚úÖ –ó–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: {result_file}")
    print(f"‚ùå –ù–µ–Ω–∞–º–µ—Ä–µ–Ω–∏ SKU –∫–æ–¥–æ–≤–µ: {not_found_file}")

if __name__ == '__main__':
    main()
