import csv
import os
import re
import time
from urllib.parse import urljoin

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


# ---------------- –ü—ä—Ç–∏—â–∞ ----------------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SKU_CSV = os.path.join(BASE_DIR, "sku_list_filstar.csv")
RES_CSV = os.path.join(BASE_DIR, "results_filstar.csv")
NF_CSV  = os.path.join(BASE_DIR, "not_found_filstar.csv")


# ---------------- WebDriver ----------------
def create_driver():
    opts = Options()
    opts.add_argument("--headless=new")
    opts.add_argument("--no-sandbox")
    opts.add_argument("--disable-dev-shm-usage")
    opts.add_argument("--window-size=1440,1200")
    opts.add_argument("--lang=bg-BG,bg,en-US,en")
    opts.add_argument(
        "--user-agent=Mozilla/5.0 (X11; Linux x86_64) "
        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127 Safari/537.36"
    )
    opts.add_experimental_option("excludeSwitches", ["enable-automation"])
    opts.add_experimental_option("useAutomationExtension", False)

    driver = webdriver.Chrome(options=opts)
    driver.set_page_load_timeout(40)
    return driver


def click_cookies_if_any(driver):
    candidates = [
        (By.CSS_SELECTOR, "#onetrust-accept-btn-handler"),
        (By.XPATH, "//button[contains(.,'–ü—Ä–∏–µ–º–∞–º')]"),
        (By.XPATH, "//*[contains(.,'–ü—Ä–∏–µ–º–∞–º –±–∏—Å–∫–≤–∏—Ç–∫–∏—Ç–µ')]"),
        (By.XPATH, "//button[contains(.,'Accept')]"),
    ]
    for how, sel in candidates:
        try:
            WebDriverWait(driver, 3).until(EC.element_to_be_clickable((how, sel))).click()
            break
        except Exception:
            pass


def norm(s):
    return str(s).strip()


# ---------------- –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç ----------------
def find_product_link_via_search(driver, sku) -> str | None:
    """–û—Ç–≤–∞—Ä—è /search?term=<SKU> –∏ –≤–∑–∏–º–∞ –ø—ä—Ä–≤–∏—è —Ä–µ–∞–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –æ—Ç .product-item-wapper a.product-name"""
    q = norm(sku)
    search_urls = [
        f"https://filstar.com/search?term={q}",
        f"https://filstar.com/bg/search?term={q}",
        f"https://filstar.com/en/search?term={q}",
    ]
    for surl in search_urls:
        try:
            driver.get(surl)
            click_cookies_if_any(driver)
            WebDriverWait(driver, 14).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".product-item-wapper a.product-name"))
            )
            anchors = driver.find_elements(By.CSS_SELECTOR, ".product-item-wapper a.product-name")
            for a in anchors:
                href = (a.get_attribute("href") or "").strip()
                if not href:
                    continue
                if href.startswith("/"):
                    href = urljoin("https://filstar.com", href)
                return href
        except Exception:
            continue
    return None


# ---------------- –ü–æ–º–æ—â–Ω–∏: log –∏ HTML dump ----------------
def save_debug_html(driver, sku, tag="page"):
    try:
        path = os.path.join(BASE_DIR, f"debug_{sku}_{tag}.html")
        with open(path, "w", encoding="utf-8") as f:
            f.write(driver.page_source)
        print(f"   üêû –ó–∞–ø–∏—Å–∞—Ö HTML –∑–∞ {sku}: {path}")
    except Exception:
        pass


# ---------------- –ò–∑–≤–ª–∏—á–∞–Ω–µ –æ—Ç —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ ----------------
def find_row_by_sku_in_table(driver, sku):
    """
    –û–±—Ö–æ–∂–¥–∞ –≤—Å–∏—á–∫–∏ —Ä–µ–¥–æ–≤–µ –≤ #fast-order-table tbody –∏ —Ç—ä—Ä—Å–∏ –∫–ª–µ—Ç–∫–∞ td.td-sky,
    —á–∏–π—Ç–æ —Ç–µ–∫—Å—Ç == SKU (—Å–ª–µ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è).
    –í—Ä—ä—â–∞ (row_el, code_text) –∏–ª–∏ (None, None).
    """
    q = norm(sku)
    try:
        tbody = WebDriverWait(driver, 12).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "#fast-order-table tbody"))
        )
    except Exception:
        # –Ω—è–∫–æ–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω—è–º–∞—Ç —Ç–∞–±–ª–∏—Ü–∞ (–±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∏)
        return None, None

    rows = tbody.find_elements(By.CSS_SELECTOR, "tr")
    print(f"   üîé DEBUG: –Ω–∞–º–µ—Ä–µ–Ω–∏ —Ä–µ–¥–æ–≤–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞: {len(rows)}")

    for idx, row in enumerate(rows, start=1):
        try:
            code_td = row.find_element(By.CSS_SELECTOR, "td.td-sky")
            code_text = (code_td.text or "").replace("\xa0", " ").strip()
            code_text_digits = re.sub(r"\D+", "", code_text)
            print(f"      ‚Ä¢ —Ä–µ–¥ {idx}: code_cell='{code_text}' (digits='{code_text_digits}')")
            if code_text_digits == q:
                print(f"      ‚úÖ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ SKU –≤ —Ä–µ–¥ {idx}")
                return row, code_text
        except Exception:
            continue

    return None, None


def extract_normal_price_from_row(row_el):
    """
    –í–∑–∏–º–∞ –ù–û–†–ú–ê–õ–ù–ê–¢–ê —Ü–µ–Ω–∞ –≤ –ª–µ–≤–∞ –æ—Ç —Ä–µ–¥–∞:
      1) –∞–∫–æ –∏–º–∞ <strike>‚Ä¶ –ª–≤. ‚Üí –Ω–æ—Ä–º–∞–ª–Ω–∞ (—Å—Ç–∞—Ä–∞) —Ü–µ–Ω–∞
      2) –∏–Ω–∞—á–µ –≤–∑–µ–º–∏ –ø—ä—Ä–≤–∞—Ç–∞ '‚Ä¶ –ª–≤.' –æ—Ç —Ü–µ–Ω–æ–≤–∞—Ç–∞ –∫–ª–µ—Ç–∫–∞ (td —Å '–¶–ï–ù–ê –ù–ê –î–†–ï–ë–ù–û')
      3) –∫–∞—Ç–æ fallback ‚Äì –≤—Å—è–∫–∞ '‚Ä¶ –ª–≤.' –≤ —Ü–µ–ª–∏—è —Ä–µ–¥
    """
    # 1) strike –≤ —Ä–µ–¥–∞
    try:
        strikes = row_el.find_elements(By.TAG_NAME, "strike")
        for st in strikes:
            raw = (st.text or "").replace("\xa0", " ")
            m = re.search(r"(\d+[.,]?\d*)\s*–ª–≤", raw, flags=re.IGNORECASE)
            if m:
                price = m.group(1).replace(",", ".")
                print(f"      üîé DEBUG: strike price='{price}'")
                return price
    except Exception:
        pass

    # 2) —Ü–µ–ª–µ–≤–∞ –∫–ª–µ—Ç–∫–∞ "–¶–ï–ù–ê –ù–ê –î–†–ï–ë–ù–û"
    try:
        price_td = row_el.find_element(By.XPATH, ".//td[.//span[contains(.,'–¶–ï–ù–ê –ù–ê –î–†–ï–ë–ù–û')]]")
        txt = (price_td.text or "").replace("\xa0", " ")
        print(f"      üîé DEBUG: price_td_text='{txt[:80]}'")
        m = re.search(r"(\d+[.,]?\d*)\s*–ª–≤", txt, flags=re.IGNORECASE)
        if m:
            price = m.group(1).replace(",", ".")
            return price
    except Exception:
        pass

    # 3) fallback: –≤—Å—è–∫–∞ –ª–≤. —Ü–µ–Ω–∞ –≤ —Ü–µ–ª–∏—è —Ä–µ–¥
    try:
        txt = (row_el.text or "").replace("\xa0", " ")
        print(f"      üîé DEBUG: row_text_snippet='{txt[:120]}'")
        m = re.search(r"(\d+[.,]?\d*)\s*–ª–≤", txt, flags=re.IGNORECASE)
        if m:
            price = m.group(1).replace(",", ".")
            return price
    except Exception:
        pass

    return None


def scrape_product_page(driver, product_url, sku):
    """–ó–∞—Ä–µ–∂–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞, –Ω–∞–º–∏—Ä–∞ —Ä–µ–¥–∞ –ø–æ SKU –∏ –≤–∞–¥–∏ –Ω–æ—Ä–º–∞–ª–Ω–∞—Ç–∞ —Ü–µ–Ω–∞ (–ª–≤) + —Å—Ç–∞—Ç—É—Å/qty."""
    driver.get(product_url)
    click_cookies_if_any(driver)

    # –∏–∑—á–∞–∫–∞–π —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ –∏ —Ä–µ–Ω–¥–µ—Ä–∞
    try:
        WebDriverWait(driver, 14).until(EC.presence_of_element_located((By.ID, "fast-order-table")))
    except Exception:
        pass
    # –º–∞–ª–∫–æ —Å–∫—Ä–æ–ª –∑–∞ —Ç—Ä–∏–≥—ä—Ä –Ω–∞ lazy render
    try:
        driver.execute_script("window.scrollBy(0, 500);")
        time.sleep(0.4)
        driver.execute_script("window.scrollBy(0, 500);")
        time.sleep(0.4)
    except Exception:
        pass

    print(f"   üîé TITLE: {driver.title.strip()[:120]}")
    print(f"   üîé URL:   {driver.current_url}")

    row, code_text = find_row_by_sku_in_table(driver, sku)
    if not row:
        print("   ‚ö†Ô∏è DEBUG: –Ω–µ –Ω–∞–º–µ—Ä–∏—Ö —Ä–µ–¥ –∑–∞ —Ç–æ–≤–∞ SKU –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞.")
        save_debug_html(driver, sku, tag="no_row")
        return "Unknown", 0, None

    price = extract_normal_price_from_row(row)
    if price is None:
        print("   ‚ö†Ô∏è DEBUG: –Ω–µ —É—Å–ø—è—Ö –¥–∞ –∏–∑–≤–ª–µ–∫–∞ —Ü–µ–Ω–∞ –æ—Ç —Ä–µ–¥–∞ ‚Äì dump-–≤–∞–º HTML.")
        save_debug_html(driver, sku, tag="no_price")

    # —Å—Ç–∞—Ç—É—Å/qty –Ω–µ —Å–µ –≤–∏–∂–¥–∞—Ç –∑–∞ –∞–Ω–æ–Ω–∏–º–Ω–∏ ‚Äì –æ—Å—Ç–∞–≤—è–º–µ Unknown/0
    status, qty = "Unknown", 0
    return status, qty, price


# ---------------- CSV I/O ----------------
def read_sku_codes(path):
    skus = []
    with open(path, newline="", encoding="utf-8") as f:
        r = csv.reader(f)
        header = next(r, None)  # –ø—Ä–æ–ø—É—Å–∫–∞–º–µ —Ö–µ–¥—ä—Ä–∞
        for row in r:
            if not row:
                continue
            val = (row[0] or "").strip()
            if not val or val.lower() == "sku":
                continue
            skus.append(val)
    if skus:
        print(f"   üßæ SKUs loaded ({len(skus)}): {', '.join(skus[:5])}{' ...' if len(skus)>5 else ''}")
    else:
        print("   üßæ No SKUs loaded from CSV.")
    return skus


def save_results(rows, path):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["SKU", "–ù–∞–ª–∏—á–Ω–æ—Å—Ç", "–ë—Ä–æ–π–∫–∏", "–¶–µ–Ω–∞ (–Ω–æ—Ä–º–∞–ª–Ω–∞ –ª–≤.)"])
        w.writerows(rows)


def save_not_found(skus, path):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["SKU"])
        for s in skus:
            w.writerow([s])


# ---------------- main ----------------
def main():
    skus = read_sku_codes(SKU_CSV)
    driver = create_driver()
    results, not_found = [], []

    try:
        for sku in skus:
            print(f"\n‚û°Ô∏è –û–±—Ä–∞–±–æ—Ç–≤–∞–º SKU: {sku}")

            product_url = find_product_link_via_search(driver, sku)
            if not product_url:
                print(f"‚ùå –ù–µ –Ω–∞–º–µ—Ä–∏—Ö –ø—Ä–æ–¥—É–∫—Ç –∑–∞ {sku} –≤ —Ç—ä—Ä—Å–∞—á–∫–∞—Ç–∞.")
                not_found.append(sku)
                continue

            print(f"  ‚úÖ –ü—Ä–æ–¥—É–∫—Ç –ª–∏–Ω–∫: {product_url}")
            status, qty, price = scrape_product_page(driver, product_url, sku)
            print(f"     ‚Üí –°—Ç–∞—Ç—É—Å: {status} | –ë—Ä–æ–π–∫–∏: {qty} | –¶–µ–Ω–∞: {price if price else '‚Äî'}")

            results.append([sku, status, qty, price or ""])
            time.sleep(0.2)

    finally:
        driver.quit()

    save_results(results, RES_CSV)
    save_not_found(not_found, NF_CSV)
    print(f"\n‚úÖ –ó–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏: {RES_CSV}")
    print(f"‚ùå –ù–µ–Ω–∞–º–µ—Ä–µ–Ω–∏ SKU –∫–æ–¥–æ–≤–µ: {NF_CSV}")


if __name__ == "__main__":
    main()
